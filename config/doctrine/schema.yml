options:
  type: INNODB
  
sbTestimonial:
  actAs:
    Timestampable: ~
    Taggable: ~
    Sluggable:
      unique: true
      fields: [ name, job_title, company_name ]
      canUpdate: true
  columns:
    id:
      type: integer
      primary: true
      autoincrement: true
    author_id:
      type: integer
    active:
      type: boolean
      default: false
      notnull: true
    name:
      type: string(255)
    job_title:
      type: string(255)
    company_name:
      type: string(255)
    testimonial:
      type: string(1000)
    person_type:
      type: string(100)
  relations:
    Author:
      class: sfGuardUser
      foreignAlias: TestimonialAuthor
      local: author_id
      foreign: id
      onDelete: SET NULL
  indexes:
    active: { fields: active }
    author: { fields: author_id }
    person_type: { fields: person_type }
sbTestimonialSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbTestimonial'

sbTestimonialsSlot:
  # Doctrine doesn't produce useful forms with column aggregation inheritance anyway,
  # and slots often use serialization into the value column... the Doctrine forms are not
  # of much use here and they clutter the project
  options:
    symfony:
      form:   false
      filter: false

  # columns:
  #
  # You can add columns here. However, if you do not need foreign key relationships it is
  # often easier to store your data in the 'value' column via serialize(). If you do add columns, 
  # their names must be unique across all slots in your project, so use a unique prefix 
  # for your company.
    
  # This is how we are able to retrieve slots of various types with a single query from
  # a single table
  inheritance:
    extends: aSlot
    type: column_aggregation
    keyField: type
    keyValue: 'sbTestimonials'
